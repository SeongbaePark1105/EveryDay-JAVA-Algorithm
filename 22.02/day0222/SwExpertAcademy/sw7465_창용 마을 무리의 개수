SW Expert Academy 7465번 창용 마을 무리의 개수
=============
* 난이도 : D4
* 외부 링크 : [sw7465](https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AWngfZVa9XwDFAQU)

* 접근 방식
	+ DFS 방식으로 풀어야 된다고 생각해서 DFS 방식으로 접근해서 풀었다.
  + 오늘 배운 union-find 형식으로도 풀수 있을 거 같은데 내용 복습 후 다시 도전해봐야겠다.


```java
package SwExpertAcademy;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class sw7465_창용마을무리의개수 {
	static int N, M;
	static int arr[][];
	static boolean visit[];

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int TC = Integer.parseInt(br.readLine());
		for (int tc = 1; tc <= TC; tc++) {
			StringTokenizer st = new StringTokenizer(br.readLine(), " ");
			N = Integer.parseInt(st.nextToken());
			M = Integer.parseInt(st.nextToken());
			arr = new int[N + 1][N + 1];
			visit = new boolean[N + 1];
			for (int i = 0; i < M; i++) {
				st = new StringTokenizer(br.readLine(), " ");
				int from = Integer.parseInt(st.nextToken());
				int to = Integer.parseInt(st.nextToken());

				arr[from][to] = arr[to][from] = 1;
			}
			int result = 1;
			for (int i = 1; i <= N; i++) {
				if (!visit[i]) {
					dfs(i);
					for (int j = 1; j <= N; j++) {
						if (!visit[j]) {
							result++;
							break;
						}
					}
				}
			}
			System.out.println("#" + tc + " " + result);
		}
	}

	static void dfs(int start) {
		
		if(!visit[start]) {
			visit[start] = true;
			for(int i = 1; i<=N; i++) {
				if(arr[start][i] ==1 && !visit[i])
					dfs(i);
			}
		}
		
	}
}
